define(['jquery', 'underscore'], function($, _){
	return function(zoon_data) {
		var queue = [];
		var timeoutId = null;

		function send(data, op) {
			if(op === 'update.cat') {
				zoon_data.cat = data;
				return;
			}

			if(_.isEmpty(data)) return;

			if(data.ev_extra && typeof data.ev_extra === 'string') {
				data.ev_extra = { value: data.ev_extra };
			}

			var extra = _.extend({}, zoon_data.ev_extra, data.ev_extra);
			data.ev_type = data.ev_type || 'event';
			var dataToSend = _.extend({}, zoon_data, data, { ev_extra: extra });

			if(_.isEmpty(dataToSend.ev_extra)) delete dataToSend.ev_extra;
			dataToSend.ev_extra = JSON.stringify(dataToSend.ev_extra);

			// Добавим событие в очередь
			queue.push(dataToSend);

			// Отрпавим очередь событий
			debounce();
		}

		function debounce(_timeout) {
			var timeout = _timeout || 100;

			clearTimeout(timeoutId);
			timeoutId = setTimeout(function(){
				var q = prepareQueue(queue); // сгрупируем события и обновим очередь
				//var q = queue.splice(0, Math.min(queue.length, 10)); // Отрежем события от очереди и отправим их
				send_data(q);
				if(queue.length) debounce(50); // Если в очереди ещё остались не отправленные события, то отправим их через 50 мс
			}, timeout);
		}

		function prepareQueue() {
			var q = [];
			var new_queue = [];
			var groupKey = null;

			_.each(queue, function(item, i) {
				var key = JSON.stringify(prepareItem(item));
				if(!groupKey) groupKey = key;
				if(groupKey === key) {
					q.push(item);
				} else {
					new_queue.push(item);
				}
			});

			// Обновим очередь
			queue = new_queue;

			return q;
		}

		function prepareItem(item) {
			var obj = _.clone(item);
			obj.object_id = null;
			obj.object_pos = null;
			return obj;
		}

		function recursive_map(obj, iterator) {
			var mapper = _.isArray(obj) ? _.map : _.mapObject;
			return mapper(obj, function(val, key) {
				return _.isObject(val) ? recursive_map(val, iterator) : iterator.call({}, val, key);
			});
		}

		function send_data(q) {
			if(!q.length) return;

			var data = {};

			_.each(q, function(item) {
				var obj = prepareItem(item);
				var key = JSON.stringify(obj);

				if(!data[key]) {
					data[key] = {
						object_ids: [],
						object_pos: {}
					};
				}

				if(_.isArray(item.object_id)) {
					// old style
					data[key]['object_ids'] = data[key]['object_ids'].concat(item.object_id);
				} else if(item.object_id) {
					// new style
					data[key]['object_ids'].push(item.object_id);
				}

				if(_.isObject(item.object_pos)) {
					_.extend(data[key]['object_pos'], item.object_pos);
				} else if(item.object_pos) {
					data[key]['object_pos'][item.object_id] = item.object_pos;
				}

				data[key]['data'] = obj;
			});

			_.each(data, function(item, key) {
				var obj = item.data;
				obj.object_id = item.object_ids;
				obj.object_pos = _.size(item.object_pos) ? JSON.stringify(item.object_pos) : {};

				var data = recursive_map({events: [_.extend({}, obj)], area: 'za'}, function (val) {
					return _.isNull(val) ? '' : val
				});

				$.post('/stat.php', data);
			});
		}

		function asyncTracker (onload, resolve) {
			var dfd = $.Deferred();
			if (onload) {
				onload(function(tracker){
					if (undefined === tracker) return;
					dfd.resolve(resolve(tracker));
				});
				setTimeout(function(){
					dfd.resolve({});
				}, 3000);
			} else {
				setTimeout(function(){
					dfd.resolve({});
				}, 0);
			}
			return dfd;
		}

		$.when(
			asyncTracker(window.ga, function(tracker){
				return {
					ga_clientId: tracker.get('clientId'),
					ga_trackingId: tracker.get('trackingId')
				};
			}),
			asyncTracker(function(cb){
				var win = window;
				var counter = 'yaCounter11812912';
				var callback = 'yandex_metrika_callbacks';
				win[counter] ? _.defer(cb, win[counter]) : (win[callback]=win[callback]||[]).push(function(){ cb(win[counter]) });
			}, function(tracker){
				return { ym_clientId: tracker.getClientID() };
			})
		).done(function(ga, ym){
			_.extend(zoon_data, ga, ym);
			var q = window.za.q || [];
			window.za = send;
			send({ev_type: 'pageview'});
			for (var i = 0, len = q.length; i < len; ++i) {
				send(q[i].data, q[i].op);
			}
		});

		// Если не успели отравить статистику, до перезагрузки страницы
		$(window).on('unload.za', function(e) {
			clearTimeout(timeoutId);
			send_data(queue); // Если в очереди ещё остались не отправленные события
		});
	};
});